<htmls lang='en'>
  {{> head }}

  <body>
    <main class="py-12 md:py-16 lg:py-20"  x-data="loginData()">
      <div class="flex flex-col items-center space-y-4 md:space-y-5 lg:space-y-6">
        <img src="/logo.png" alt="Medverse Logo" />
          <h1 class="text-center">PLEASE ENTER EMAIL TO CONTINUE</h1>
          <form @submit="register">
            <div class='frame-top'></div>
            <div class='frame-bottom'></div>
            <div class="input-group" x-show="!!address" x-cloak>
              <label for="account">Address</label>
              <input id="account" :value="address" type="text" disabled required placeholder="" />
            </div>  
            <div class="input-group" x-cloak x-show="requireEmail">
              <label for="email">Email</label>
              <input id="email" x-model="email" type="email" :required="requireEmail" placeholder="" />
            </div>  
            <br />
            <button x-cloak x-show="!!address" class="w-full btn" type="submit">SIGN IN</button>                          
            <button x-cloak @click="connectWallet" x-show="!address" class="w-full btn" type="button">CONNECT WALLET</button>                          
          </form>          
      </div>    
    </main>
  </body>
  <script>       
    document.addEventListener('alpine:init', () => {
      Alpine.data('loginData', () => ({
        address: '',
        email: '',
        isMetamaskInstalled: false,
        requireEmail: false,
        isLoading: true,
        nonce: '',
        async init() {
          return connectWallet()
        },
        async connectWallet(){
           if (!window.ethereum) {           
            return toastError('Please install Metamask')
          }          
          if (window.ethereum.selectedAddress){
            this.address = window.ethereum.selectedAddress
          } else {
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
            if (accounts.length > 0) {
              this.address = accounts[0]
            }
          }
          if (!this.address) {
            return toastError('Please connect your wallet')
          }
          return this.checkAddress()
        },
        async checkAddress(){
          const { requireEmail, nonce } = await axios.post('/auth/register/ethereum', {
            publicAddress: this.address
          });
          this.requireEmail = requireEmail;  
          this.nonce = nonce;        
          this.isLoading = false;          
        },
        async register(e){
          e.preventDefault();                    
          // Sign the nonce
          const signature = await window.ethereum.request({
            method: 'personal_sign',
            params: [this.nonce, this.address]
          });
          // Send the signature to the server
          const body = {
            account: this.address,
            signature,
            email: this.email
          }
          if (!this.requireEmail) {
            delete body.email
          }
          await axios.post('/auth/login/ethereum',body);
          window.location.href = '/dashboard';
        }
      }))
    })
  </script>
</html>